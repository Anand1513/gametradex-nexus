const express = require('express');
const router = express.Router();
const SuccessStory = require('../../models/SuccessStory');
const DealLog = require('../../models/DealLog');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Configure multer for image uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = 'uploads/success-stories/';
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'success-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'), false);
    }
  }
});

// Success Stories Routes
// GET /api/success/stories - Get all success stories
router.get('/stories', async (req, res) => {
  try {
    const stories = await SuccessStory.find().sort({ createdAt: -1 });
    res.json(stories);
  } catch (error) {
    console.error('Error fetching success stories:', error);
    res.status(500).json({ error: 'Failed to fetch success stories' });
  }
});

// POST /api/success/stories - Create new success story
router.post('/stories', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Image is required' });
    }

    const { caption } = req.body;
    if (!caption) {
      // Delete uploaded file if validation fails
      fs.unlinkSync(req.file.path);
      return res.status(400).json({ error: 'Caption is required' });
    }

    const successStory = new SuccessStory({
      imageUrl: `/uploads/success-stories/${req.file.filename}`,
      caption: caption.trim()
    });

    await successStory.save();
    res.status(201).json(successStory);
  } catch (error) {
    console.error('Error creating success story:', error);
    // Delete uploaded file if save fails
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    res.status(500).json({ error: 'Failed to create success story' });
  }
});

// PUT /api/success/stories/:id - Update success story
router.put('/stories/:id', async (req, res) => {
  try {
    const { caption } = req.body;
    if (!caption) {
      return res.status(400).json({ error: 'Caption is required' });
    }

    const story = await SuccessStory.findByIdAndUpdate(
      req.params.id,
      { caption: caption.trim() },
      { new: true }
    );

    if (!story) {
      return res.status(404).json({ error: 'Success story not found' });
    }

    res.json(story);
  } catch (error) {
    console.error('Error updating success story:', error);
    res.status(500).json({ error: 'Failed to update success story' });
  }
});

// DELETE /api/success/stories/:id - Delete success story
router.delete('/stories/:id', async (req, res) => {
  try {
    const story = await SuccessStory.findById(req.params.id);
    if (!story) {
      return res.status(404).json({ error: 'Success story not found' });
    }

    // Delete the image file
    const imagePath = path.join(__dirname, '../../..', story.imageUrl);
    if (fs.existsSync(imagePath)) {
      fs.unlinkSync(imagePath);
    }

    await SuccessStory.findByIdAndDelete(req.params.id);
    res.json({ message: 'Success story deleted successfully' });
  } catch (error) {
    console.error('Error deleting success story:', error);
    res.status(500).json({ error: 'Failed to delete success story' });
  }
});

// Deal Logs Routes
// GET /api/success/deals - Get all deal logs
router.get('/deals', async (req, res) => {
  try {
    const deals = await DealLog.find().sort({ date: -1 });
    res.json(deals);
  } catch (error) {
    console.error('Error fetching deal logs:', error);
    res.status(500).json({ error: 'Failed to fetch deal logs' });
  }
});

// POST /api/success/deals - Create new deal log
router.post('/deals', async (req, res) => {
  try {
    const { message, date } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    // Auto-generate formatted message
    const currentDate = date ? new Date(date) : new Date();
    const formattedDate = currentDate.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
    
    const autoGeneratedMessage = `âœ… ${formattedDate} â€” ${message.trim()} ðŸŽ‰`;

    const dealLog = new DealLog({
      message: autoGeneratedMessage,
      date: currentDate
    });

    await dealLog.save();
    res.status(201).json(dealLog);
  } catch (error) {
    console.error('Error creating deal log:', error);
    res.status(500).json({ error: 'Failed to create deal log' });
  }
});

// PUT /api/success/deals/:id - Update deal log
router.put('/deals/:id', async (req, res) => {
  try {
    const { message } = req.body;
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    const deal = await DealLog.findByIdAndUpdate(
      req.params.id,
      { message: message.trim() },
      { new: true }
    );

    if (!deal) {
      return res.status(404).json({ error: 'Deal log not found' });
    }

    res.json(deal);
  } catch (error) {
    console.error('Error updating deal log:', error);
    res.status(500).json({ error: 'Failed to update deal log' });
  }
});

// DELETE /api/success/deals/:id - Delete deal log
router.delete('/deals/:id', async (req, res) => {
  try {
    const deal = await DealLog.findById(req.params.id);
    if (!deal) {
      return res.status(404).json({ error: 'Deal log not found' });
    }

    await DealLog.findByIdAndDelete(req.params.id);
    res.json({ message: 'Deal log deleted successfully' });
  } catch (error) {
    console.error('Error deleting deal log:', error);
    res.status(500).json({ error: 'Failed to delete deal log' });
  }
});

module.exports = router;
